stages:
  - build
  - publish

default:
  tags:
    - benzaiten-autoscale

# Global variable (can configure outside in gitlab web)
variables:
  PROXY: "http://proxy.toshiba.co.jp:8080"
  NO_PROXY: "127.0.0.1,tccloud2.toshiba.co.jp,localhost,docker"
  ACCESS_TOKEN: "J-CyStgYPMWeTFSY_Ubs"
  PGSPIDER_PROJECT_ID: "16"
  RPM_ARTIFACT_DIR: "fdw_rpm"
  PGSPIDER_RELEASE_VERSION: "4.0.0"
  PGSPIDER_BASE_POSTGRESQL_VERSION: "16"
  RPM_DISTRIBUTION_TYPE: "rhel8"
  SQLITE_FDW_RELEASE_VERSION: "2.4.0"
  PGSPIDER_RPM_ID: "11835"
  SQLITE_VERSION: "3420000"
  SQLITE_RELEASE_VERSION: "3.42.0"

project_build:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    IMAGE_TAG: "fdw_build"
    DOCKERFILE: "Dockerfile_rpm"
  before_script:
    - export http_proxy=$PROXY && export https_proxy=$PROXY
    - export no_proxy=$NO_PROXY
    - apk add wget
    # handle if the previous pipeline error
    - docker rm $(docker stop test) || true
    - docker rmi $IMAGE_TAG || true
    - echo "y" | docker system prune
  script:
    - cd deps && chmod -R 777 ./
    - wget https://www.sqlite.org/2023/sqlite-autoconf-$SQLITE_VERSION.tar.gz --no-check-certificate 
    - cd ..
    - echo "Building RPM ....."
    - if [ $PGSPIDER_RPM_ID ]; then PGSPIDER_RPM_ID_POSTFIX="-$PGSPIDER_RPM_ID"; fi
    - docker build -t $IMAGE_TAG
                  --build-arg proxy=$PROXY
                  --build-arg no_proxy=$NO_PROXY
                  --build-arg ACCESS_TOKEN=$ACCESS_TOKEN
                  --build-arg DISTRIBUTION_TYPE=$RPM_DISTRIBUTION_TYPE
                  --build-arg PGSPIDER_BASE_POSTGRESQL_VERSION=$PGSPIDER_BASE_POSTGRESQL_VERSION
                  --build-arg PGSPIDER_RELEASE_VERSION=$PGSPIDER_RELEASE_VERSION
                  --build-arg PGSPIDER_RPM_ID=$PGSPIDER_RPM_ID_POSTFIX
                  --build-arg PGSPIDER_PROJECT_ID=$PGSPIDER_PROJECT_ID
                  --build-arg SQLITE_FDW_RELEASE_VERSION=$SQLITE_FDW_RELEASE_VERSION
                  --build-arg SQLITE_VERSION=$SQLITE_VERSION
                  --build-arg SQLITE_RELEASE_VERSION=$SQLITE_RELEASE_VERSION
                  -f $DOCKERFILE .
    # get rpm file from docker image
    - mkdir -p $RPM_ARTIFACT_DIR
    - docker run -d --name test $IMAGE_TAG /usr/sbin/init
    - docker cp test:/home/user1/rpmbuild/RPMS/x86_64 $RPM_ARTIFACT_DIR
    # clean-up: delete docker image
    - docker rm $(docker stop test)
    - docker rmi $IMAGE_TAG
    - cp $RPM_ARTIFACT_DIR/x86_64/* $RPM_ARTIFACT_DIR
    - rm -rf $RPM_ARTIFACT_DIR/x86_64/
  artifacts:
    paths:
      - $RPM_ARTIFACT_DIR
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'

# Push RPM to Registry job
project_publish:
  stage: publish
  before_script:
    - export http_proxy=$PROXY && export https_proxy=$PROXY
    - export no_proxy=$NO_PROXY
    - apt-get update -qq && apt-get install -y -qq curl
  variables:
    curl_command: "curl --header \"PRIVATE-TOKEN: $ACCESS_TOKEN\" --insecure --upload-file"
    package_uri: "https://tccloud2.toshiba.co.jp/swc/gitlab/api/v4/projects/$CI_PROJECT_ID/packages/generic/rpm_$RPM_DISTRIBUTION_TYPE/$PGSPIDER_BASE_POSTGRESQL_VERSION"
  script:
    - echo "Publishing ....."
    # sqlite
    - eval "$curl_command $RPM_ARTIFACT_DIR/sqlite-$SQLITE_RELEASE_VERSION-$RPM_DISTRIBUTION_TYPE.x86_64.rpm
                          $package_uri/sqlite-$SQLITE_RELEASE_VERSION-$RPM_DISTRIBUTION_TYPE.x86_64-$CI_PIPELINE_ID.rpm"
    # sqlite_fdw
    - eval "$curl_command $RPM_ARTIFACT_DIR/sqlite_fdw_$PGSPIDER_BASE_POSTGRESQL_VERSION-$SQLITE_FDW_RELEASE_VERSION-$RPM_DISTRIBUTION_TYPE.x86_64.rpm
                          $package_uri/sqlite_fdw_$PGSPIDER_BASE_POSTGRESQL_VERSION-$SQLITE_FDW_RELEASE_VERSION-$RPM_DISTRIBUTION_TYPE.x86_64-$CI_PIPELINE_ID.rpm"
    # debugsource
    - eval "$curl_command $RPM_ARTIFACT_DIR/sqlite_fdw_$PGSPIDER_BASE_POSTGRESQL_VERSION-debugsource-$SQLITE_FDW_RELEASE_VERSION-$RPM_DISTRIBUTION_TYPE.x86_64.rpm
                          $package_uri/sqlite_fdw_$PGSPIDER_BASE_POSTGRESQL_VERSION-debugsource-$SQLITE_FDW_RELEASE_VERSION-$RPM_DISTRIBUTION_TYPE.x86_64-$CI_PIPELINE_ID.rpm"
    # llvmjit
    - eval "$curl_command $RPM_ARTIFACT_DIR/sqlite_fdw_$PGSPIDER_BASE_POSTGRESQL_VERSION-llvmjit-$SQLITE_FDW_RELEASE_VERSION-$RPM_DISTRIBUTION_TYPE.x86_64.rpm
                          $package_uri/sqlite_fdw_$PGSPIDER_BASE_POSTGRESQL_VERSION-llvmjit-$SQLITE_FDW_RELEASE_VERSION-$RPM_DISTRIBUTION_TYPE.x86_64-$CI_PIPELINE_ID.rpm"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
