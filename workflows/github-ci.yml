name: Create RPM Release

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build_rpm:
    runs-on: ubuntu-latest
    env:
      # source code version, sync with version in spec file
      SQLITE_FDW_RELEASE_VERSION: "2.1.1"
      # Postgres/PGSpider version
      PGSPIDER_BASE_POSTGRESQL_VERSOIN: "16"
      PG_MAJOR_VERSION: "16.0"
      # PGSpider rpm version 0.0.1
      # PostgreSQL 16 rpm package can be found in: "https://download.postgresql.org/pub/repos/yum/16/redhat/rhel-8-x86_64/"
      PGSPIDER_URL_PACKAGE: "https://github.com/pgspider/pgspider/archive/refs/tags/"
      # personal access token
      ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      # package:
      RELEASE_ID: "122748985"
      # sqlite_fdw package registry: 394 is project id of sqlite_fdw
      URL_PACKAGE: "https://api.github.com/repos/pgspider/sqlite_fdw/releases/"

    steps:
    - uses: actions/checkout@v3

    - name: build docker image
      run: |
        docker build -t $IMAGE_TAG \
        --build-arg proxy=${PROXY} \
        --build-arg no_proxy=${NO_PROXY} \
        --build-arg SQLITE_FDW_RELEASE_VERSION=${SQLITE_FDW_RELEASE_VERSION} \
        --build-arg PGSPIDER_BASE_POSTGRESQL_VERSOIN=${PGSPIDER_BASE_POSTGRESQL_VERSOIN} \
        --build-arg PG_MAJOR_VERSION=${PG_MAJOR_VERSION} \
        --build-arg PGSPIDER_URL_PACKAGE=${PGSPIDER_URL_PACKAGE} .

    - name: get rpm file from docker image
      run: |
        mkdir -p $RPM_DIR
        docker run --rm -v $(pwd)/$RPM_DIR:/tmp \
        -u "$(id -u $USER):$(id -g $USER)" \
        -e LOCAL_UID=$(id -u $USER) \
        -e LOCAL_GID=$(id -g $USER) \
        $IMAGE_TAG /bin/sh -c "cp /home/user1/rpmbuild/RPMS/x86_64/*.rpm /tmp/"

    - name: push to github repo
      run: |
        'for file in ${RPM_DIR}/*.rpm; do \
          name="${file#${RPM_DIR}/}"; \
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${ACCESS_TOKEN}"" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -H "Content-Type: application/octet-stream" \
          ${URL_PACKAGE}/${RELEASE_ID}/assets?name=${name} " \
          --data-binary "@${name}" --insecure; \
        done'

    - name: clean up
      run: docker rmi $IMAGE_TAG
