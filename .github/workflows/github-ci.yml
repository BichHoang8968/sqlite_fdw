name: Create RPM Release

on:
  workflow_dispatch:

env:
  ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PGSPIDER_PROJECT_ID: "16"
  RPM_ARTIFACT_DIR: "fdw_rpm"
  PGSPIDER_RELEASE_VERSION: "4.0.0"
  PGSPIDER_BASE_POSTGRESQL_VERSION: "16"
  RPM_DISTRIBUTION_TYPE: "rhel8"
  SQLITE_FDW_RELEASE_VERSION: "2.4.0"
  PGSPIDER_RPM_ID: "11835"
  SQLITE_VERSION: "3420000"
  SQLITE_RELEASE_VERSION: "3.42.0"

jobs:
  project_build:
    runs-on: ubuntu-latest
    container:
      image: docker:24.0.5
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    env:
      IMAGE_TAG: "fdw_build"
      DOCKERFILE: "Dockerfile_rpm"

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Before scripts
      run: |
        apk add wget
        docker rm $(docker stop test) || true
        docker rmi $IMAGE_TAG || true
        echo "y" | docker system prune

    - name: Build RPM
      run: |
        cd deps && chmod -R 777 ./
        wget https://www.sqlite.org/2023/sqlite-autoconf-$SQLITE_VERSION.tar.gz --no-check-certificate 
        cd ..
        if [ $PGSPIDER_RPM_ID ]; then PGSPIDER_RPM_ID_POSTFIX="-$PGSPIDER_RPM_ID"; fi
        docker build -t $IMAGE_TAG \
          --build-arg DISTRIBUTION_TYPE=$RPM_DISTRIBUTION_TYPE \
          --build-arg PGSPIDER_BASE_POSTGRESQL_VERSION=$PGSPIDER_BASE_POSTGRESQL_VERSION \
          --build-arg PGSPIDER_RELEASE_VERSION=$PGSPIDER_RELEASE_VERSION \
          --build-arg PGSPIDER_RPM_ID=$PGSPIDER_RPM_ID_POSTFIX \
          --build-arg PGSPIDER_PROJECT_ID=$PGSPIDER_PROJECT_ID \
          --build-arg SQLITE_FDW_RELEASE_VERSION=$SQLITE_FDW_RELEASE_VERSION \
          --build-arg SQLITE_VERSION=$SQLITE_VERSION \
          --build-arg SQLITE_RELEASE_VERSION=$SQLITE_RELEASE_VERSION \
          -f $DOCKERFILE .

    - name: Copy RPM Artifact
      run: |
        mkdir -p $RPM_ARTIFACT_DIR
        docker run -d --name test $IMAGE_TAG /usr/sbin/init
        docker cp test:/home/user1/rpmbuild/RPMS/x86_64 $RPM_ARTIFACT_DIR

    - name: Clean up
      run: |
        docker rm $(docker stop test)
        docker rmi $IMAGE_TAG
        cp $RPM_ARTIFACT_DIR/x86_64/* $RPM_ARTIFACT_DIR
        rm -rf $RPM_ARTIFACT_DIR/x86_64/

    - name: Upload RPM Artifact
      uses: actions/upload-artifact@v2
      with:
        name: $RPM_ARTIFACT_DIR
        path: $RPM_ARTIFACT_DIR

    - name: Set SQLite FDW Version
      run: |
        echo "SQLITE_FDW_VERSION=$SQLITE_FDW_RELEASE_VERSION" >> $GITHUB_ENV

  project_publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Install curl
      run: sudo apt-get update -qq && sudo apt-get install -y -qq curl

    - name: Publish RPM
      run: |
        echo "Publishing ....."
        curl_command="curl -L \
                            -X POST \
                            -H \"Accept: application/vnd.github+json\" \
                            -H \"Authorization: Bearer ${ACCESS_TOKEN}\" \
                            -H \"X-GitHub-Api-Version: 2022-11-28\" \
                            -H \"Content-Type: application/octet-stream\" \
                            --insecure"
        assets_uri="https://uploads.github.com/repos/${OWNER_GITHUB}/${SQLITE_FDW_PROJECT_GITHUB}/releases/${SQLITE_FDW_RELEASE_ID}/assets"
        binary_dir="--data-binary \"@${RPM_ARTIFACT_DIR}\""

        eval "$curl_command $assets_uri?name=sqlite-${SQLITE_RELEASE_VERSION}-${RPM_DISTRIBUTION_TYPE}.x86_64.rpm \
                        $binary_dir/sqlite-${SQLITE_RELEASE_VERSION}-${RPM_DISTRIBUTION_TYPE}.x86_64.rpm"
        eval "$curl_command $assets_uri?name=sqlite_fdw_${PGSPIDER_BASE_POSTGRESQL_VERSION}-${SQLITE_FDW_RELEASE_VERSION}-${RPM_DISTRIBUTION_TYPE}.x86_64.rpm \
                            $binary_dir/sqlite_fdw_${PGSPIDER_BASE_POSTGRESQL_VERSION}-${SQLITE_FDW_RELEASE_VERSION}-${RPM_DISTRIBUTION_TYPE}.x86_64.rpm"
        eval "$curl_command $assets_uri?name=sqlite_fdw_${PGSPIDER_BASE_POSTGRESQL_VERSION}-debugsource-${SQLITE_FDW_RELEASE_VERSION}-${RPM_DISTRIBUTION_TYPE}.x86_64.rpm \
                            $binary_dir/sqlite_fdw_${PGSPIDER_BASE_POSTGRESQL_VERSION}-debugsource-${SQLITE_FDW_RELEASE_VERSION}-${RPM_DISTRIBUTION_TYPE}.x86_64.rpm"
        eval "$curl_command $assets_uri?name=sqlite_fdw_${PGSPIDER_BASE_POSTGRESQL_VERSION}-llvmjit-${SQLITE_FDW_RELEASE_VERSION}-${RPM_DISTRIBUTION_TYPE}.x86_64.rpm \
                            $binary_dir/sqlite_fdw_${PGSPIDER_BASE_POSTGRESQL_VERSION}-llvmjit-${SQLITE_FDW_RELEASE_VERSION}-${RPM_DISTRIBUTION_TYPE}.x86_64.rpm"